# requires environtment policy:
#   enable-logging.logstash-host

launch:
    parameters:
        logger-num: # for test purposes
            description: Number of loggers
            type: int
            default: 2

    steps:

        - provision-vm:
              action: provisionVms 
              phase: provision-vm
              parameters:                  
                  quantity: "{$.logger-num}"
                  hardwareId: "m1.small"
                  roleName: logger
                  vmIdentity: ec2-user
                  imageId: us-east-1/ami-3ecd1e57
              output:
                loggerips: ips

        # after this step, all logs will be sent to Logstash
        - enable-logging:
              action: enable-logging
              phase: enable-logging
              precedingPhases: [ provision-vm ]
              parameters:
                vms: "{$.loggerips}"
                vmIdentity: ec2-user  # should be same as in provision
              output:
                instance-dashboard: instance-dashboard

        - do-something:
              action: do-something
              precedingPhases: [ provision-vm, enable-logging ]
              parameters: {}

    return:
        vms:
            description: VMs 
            value: "{$.loggerips}"
        # ADD TO YOUR MANIFEST this return value should present to get rendered widget with link
        kibana-instance-dashboard:
            description: Logging Dashboard for instance
            value: "{$.instance-dashboard}"

do-something:
    parameters:
        command:
          type: string
          default: 'echo "Hello from execrun!"'
          description: "Command to execute"
    steps:
        - run-command:
            action: execrun
            phase: "run-command"
            precedingPhases: [  ]
            parameters:
              roles: [ logger ]
              command:
                - "{$.command}"
            output:
              stdout: stdout
              stderr: stderr
    return:
      stdout:
        value: "{$.stdout}"
      stderr:
        value: "{$.stderr}"


do-empty-chef-run:
    parameters:
        logger-cookbooks-version:
          type: string
          default: "stable"

    steps:
        - dummy-chefrun:
            action: chefsolo
            phase: "dummy-chefrun"
            precedingPhases: [ ]
            parameters:
              roles: [ logger ]
              recipeUrl: "http://qubell-logging.s3.amazonaws.com/{$.logger-cookbooks-version}/nxlog.tar.gz"
              runList: [ ]
              jattrs: {}
            output:
              chefState: chefState
    return:
        chefState:
          value: "{$.chefState}"


update-logger:
    steps:

      - enable-logging:
          action: enable-logging
          phase: enable-logging
          parameters:
            vms: "{$.vms}"
            vmIdentity: ec2-user 


destroy:
    steps:
    - destroy-vm:
        action: undeployEnv
        parameters:
            phase: destroy



# THIS IS ACTUAL REUSABLE STEP FOR OTHER MANIFESTS
# ADD TO YOUR MANIFEST
#
# TODO: should not be needed for hierarchical manifests
enable-logging:
    parameters:
        vms:
          description: "List of hosts to install and configure nxlog"
        logstash-host:
          type: string
        logger-cookbooks-version:
          type: string
          default: "stable"
        vmIdentity:
          type: string
          default: root

    steps:

        - cleanup-role:
            action: provisionVms
            phase: cleanup-role
            parameters:
                roleName: qubell-logger-source
                hardwareId: ""
                vmIdentity: "{$.vmIdentity}"
                retryCount: 1
                targetQuantity: 0

        - populate-role:
            action: provisionVms
            phase: populate-role
            precedingPhases: [ cleanup-role ]
            parameters:
                roleName: qubell-logger-source
                hardwareId: ""
                vmIdentity: "{$.vmIdentity}"
                retryCount: 1
                staticIps: "{$.vms}"

        - start-logger:
            action: chefsolo
            phase: start-logger
            precedingPhases: [ populate-role ]
            parameters:
              roles: [ qubell-logger-source ]
              recipeUrl: "http://qubell-logging.s3.amazonaws.com/{$.logger-cookbooks-version}/nxlog.tar.gz"
              runList: [ "recipe[nxlog::logger]" ]
              jattrs:
                nxlog:
                  user: "{$.vmIdentity}"
                  group: "{$.vmIdentity}"
                  root: "/home/{$.vmIdentity}/.undeploy.me/nxlog"
                  monitor_dir: "/home/{$.vmIdentity}/.undeploy.me"
                  consumer: "{$.logstash-host}"

    return:
        instance-dashboard:
          value: "http://{$.logstash-host}/kibana-master/src/index.html#/dashboard/file/logstash.json"
