header:
    version: "1.1"
    services:
        logstash:
            logstash-host:    consume-signal(string)
            kibana-dashboard: consume-signal(string)

launch:
    parameters:
        logger-num:
            description: Number of loggers
            type: int
            default: 2
    steps:
        - init-properties:
              action: getEnvironmentProperties
              phase: "init-properties"
              parameters: {}
              output:
                properties: result

        - provision-vm:
              action: provisionLoggableVms
              phase: provision-vm
              parameters:                  
                  quantity: "{$.logger-num}"
                  hardwareId: "m1.small"
                  roleName: logger
                  vmIdentity: ec2-user
                  imageId: us-east-1/ami-3ecd1e57
              output:
                loggerips: ips

        - run-command:
            action: execrun
            phase: "run-command"
            precedingPhases: [ provision-vm ]
            parameters:
              roles: [ logger ]
              command:
                - 'echo "Hello from execrun!"'

        - dummy-chefrun:
            action: chefsolo
            phase: "dummy-chefrun"
            precedingPhases: [ provision-vm, run-command ]
            parameters:
              roles: [ logger ]
              recipeUrl: https://dl.dropboxusercontent.com/u/957640/manifest/nxlog.tar.gz
              runList: [ "recipe[nxlog]" ]
              jattrs:
                nxlog:
                  user: ec2-user
                  group: ec2-user
                  root: /home/ec2-user/nxlog
    return:
        vms:
            description: VMs 
            value: "{$.loggerips}"
        kibana-instance-dashboard:
            description: Kibana Dashboard for instance
            value: "{$.properties.logstash.kibana-dashboard}"


provisionLoggableVms:
    parameters:
        roleName:
          type: string
          default: "default"
          length: {min: 1}
        hardwareId:
          type: string
          length: {min: 1}
        imageId:
          type: string
          default: ""
        quantity:
          type: int
          min: 1
          default: 1
        targetQuantity:
          type: int
          default: -1
        instanceId:
          type: string
          default: ""
        staticIps:
          default: ""
        # This parameter is obsolete. Use 'staticIps' instead.
        ip:
          type: string
          default: ""
        jcloudsProvider:
          type: string
          length: {min: 1}
          default: "stub"
        jcloudsEndpoint:
          type: string
          length: {min: 1}
          default: "stub"
        jcloudsIdentity:
          type: string
          length: {min: 1}
          default: "stub"
        jcloudsCredential:
          type: string
          length: {min: 1}
          default: "stub"
        jcloudsNodeNamePrefix:
          type: string
          length: {min: 1}
          default: "GN"
        jcloudsRegions:
          type: string
          default: ""
        # parameters ec2SecurityGroup and subnetId are mutual exclusive.
        # If subnetId is set ec2SecurityGroup is ignored.
        ec2SecurityGroup:
          type: string
          default: "default"
        subnetId:
          type: string
          default: ""
        vmIdentity:
          type: string
          default: "root"
        vmPassword:
          type: string
          default: ""
        vmCredentialResource:
          type: string
          default: "/environments/undeploy-me.pem"
          length: {min: 1}
        useSecureCredentialsStore:
          type: bool
          default: false
        providerSettings:
          type: map
          default: {}
    steps:
        - init-logger:
              action: provisionVms
              phase: provision
              parameters:                  
                  instanceId: "{$.instanceId}"
                  ip: "{$.ip}"
                  targetQuantity: "{$.targetQuantity}"
                  imageId: "{$.imageId}"
                  jcloudsRegions: "{$.jcloudsRegions}"
                  subnetId: "{$.subnetId}"
                  vmIdentity: "{$.vmIdentity}"
                  hardwareId: "{$.hardwareId}"
                  providerSettings: "{$.providerSettings}"
                  jcloudsIdentity: "{$.jcloudsIdentity}"
                  jcloudsCredential: "{$.jcloudsCredential}"
                  vmPassword: "{$.vmPassword}"
                  useSecureCredentialsStore: "{$.useSecureCredentialsStore}"
                  jcloudsProvider: "{$.jcloudsProvider}"
                  staticIps: "{$.staticIps}"
                  jcloudsNodeNamePrefix: "{$.jcloudsNodeNamePrefix}"
                  ec2SecurityGroup: "{$.ec2SecurityGroup}"
                  vmCredentialResource: "{$.vmCredentialResource}"
                  roleName: "{$.roleName}"
                  jcloudsEndpoint: "{$.jcloudsEndpoint}"
                  quantity: "{$.quantity}"
              output:
                ips: ips
                vms: vms
                privateips: privateips

        - start-logger:
            action: chefsolo
            phase: start-logger
            precedingPhases: [ provision ]
            parameters:
              roles: [ logger ]
              recipeUrl: https://dl.dropboxusercontent.com/u/957640/manifest/nxlog.tar.gz
              runList: [ "recipe[nxlog::logger]" ]
              jattrs:
                nxlog:
                  user: ec2-user
                  group: ec2-user
                  root: /home/ec2-user/nxlog
                  monitor_dir: /home/ec2-user/.undeploy.me
                  consumer: "{$.properties.logstash.logstash-host}"
    return:
        ips:
          value: "{$.ips}"
        vms:
          value: "{$.vms}"
        privateips:
          value: "{$.privateips}"




destroy:
        steps:
        - destroy-vm:
            action: undeployEnv
            parameters:
                phase: destroy