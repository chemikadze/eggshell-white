header:
    version: "1.1"
    services:
        # ADD TO YOUR MANIFEST
        logstash:
            logstash-host:    consume-signal(string)
            kibana-dashboard: consume-signal(string)

launch:
    parameters:
        logger-num: # for test purposes
            description: Number of loggers
            type: int
            default: 2
        logger-cookbooks-version: # for test purposes
            type: string
            default: "latest"
    steps:

        # needed to show dashboard link
        - init-properties:
            action: getEnvironmentProperties
            phase: "init-properties"
            parameters: {}
            output:
              properties: result

        # example usage of reusable step
        - provision-vm:
              action: .provisionLoggableVms 
              phase: provision-vm
              parameters:                  
                  quantity: "{$.logger-num}"
                  hardwareId: "m1.small"
                  roleName: logger
                  vmIdentity: ec2-user
                  imageId: us-east-1/ami-3ecd1e57
                  # can be skipped, and "stable" will be used. only for development purposes
                  logger-cookbooks-version: "{$.logger-cookbooks-version}"
              output:
                loggerips: ips

        # test how it works
        - do-something:
              action: do-something
              precedingPhases: [ provision-vm ]
              parameters: {}

    return:
        vms:
            description: VMs 
            value: "{$.loggerips}"
        # ADD TO YOUR MANIFEST this return value should present to get rendered widget with link
        kibana-instance-dashboard:
            description: Kibana Dashboard for instance
            value: "{$.properties.logstash.kibana-dashboard}"

# for development purposes
do-something:
    parameters:
        command:
          type: string
          default: 'echo "Hello from execrun!"'
          description: "Command to execute"
    steps:
        - run-command:
            action: execrun
            phase: "run-command"
            precedingPhases: [  ]
            parameters:
              roles: [ logger ]
              command:
                - "{$.command}"
            output:
              stdout: stdout
              stderr: stderr
    return:
      stdout:
        value: "{$.stdout}"
      stderr:
        value: "{$.stderr}"


do-empty-chef-run:
    steps:
        - dummy-chefrun:
            action: chefsolo
            phase: "dummy-chefrun"
            precedingPhases: [ ]
            parameters:
              roles: [ logger ]
              recipeUrl: "http://qubell-logging.s3.amazonaws.com/{$.logger-cookbooks-version}/nxlog.tar.gz"
              runList: [ ]
              jattrs: {}
            output:
              chefState: chefState
    return:
        chefState:
          value: "{$.chefState}"


# for development purposes
update-logger:
    parameters:
      roleName:
        type: string
        default: "logger"
      logger-cookbooks-version:
        type: string
        default: "latest"
      logger-user:
        type: string
        default: ec2-user
      logger-group:
        type: string
        default: ec2-user
    steps:

      - init-properties:
          action: getEnvironmentProperties
          phase: "init-properties"
          parameters: {}
          output:
            properties: result

      - install-logger:
          action: chefsolo
          phase: start-logger
          precedingPhases: [ ]
          parameters:
            roles: [ logger ]
            recipeUrl: "http://qubell-logging.s3.amazonaws.com/{$.logger-cookbooks-version}/nxlog.tar.gz"
            runList: [ "recipe[nxlog::logger]" ]
            jattrs:
              nxlog:
                user: "{$.logger-user}"
                group: "{$.logger-group}"
                root: "/home/{$.logger-user}/nxlog"
                monitor_dir: /home/{$.logger-user}/.undeploy.me
                consumer: "{$.properties.logstash.logstash-host}"


destroy:
    steps:
    - destroy-vm:
        action: undeployEnv
        parameters:
            phase: destroy



# THIS IS ACTUAL REUSABLE STEP FOR OTHER MANIFESTS
# ADD TO YOUR MANIFEST
.provisionLoggableVms:
    parameters:
        roleName:
          type: string
          default: "default"
          length: {min: 1}
        hardwareId:
          type: string
          length: {min: 1}
        imageId:
          type: string
          default: ""
        quantity:
          type: int
          min: 1
          default: 1
        targetQuantity:
          type: int
          default: -1
        instanceId:
          type: string
          default: ""
        staticIps:
          default: ""
        # This parameter is obsolete. Use "staticIps" instead.
        ip:
          type: string
          default: ""
        jcloudsProvider:
          type: string
          length: {min: 1}
          default: "stub"
        jcloudsEndpoint:
          type: string
          length: {min: 1}
          default: "stub"
        jcloudsIdentity:
          type: string
          length: {min: 1}
          default: "stub"
        jcloudsCredential:
          type: string
          length: {min: 1}
          default: "stub"
        jcloudsNodeNamePrefix:
          type: string
          length: {min: 1}
          default: "GN"
        jcloudsRegions:
          type: string
          default: ""
        # parameters ec2SecurityGroup and subnetId are mutual exclusive.
        # If subnetId is set ec2SecurityGroup is ignored.
        ec2SecurityGroup:
          type: string
          default: "default"
        subnetId:
          type: string
          default: ""
        vmIdentity:
          type: string
          default: "root"
        vmPassword:
          type: string
          default: ""
        vmCredentialResource:
          type: string
          default: "/environments/undeploy-me.pem"
          length: {min: 1}
        useSecureCredentialsStore:
          type: bool
          default: false
        providerSettings:
          type: map
          default: {}

        logger-cookbooks-version:
          type: string
          default: "stable"
        # TODO
        # logger-user:
        #   type: string
        #   default: ec2-user
        # logger-group:
        #   type: string
        #   default: ec2-user

    steps:
        - init-properties:
              action: getEnvironmentProperties
              phase: init-properties
              parameters: {}
              output:
                properties: result

        - wrapped-provision-vms:
              action: provisionVms
              phase: provision              
              parameters:                  
                  instanceId: "{$.instanceId}"
                  ip: "{$.ip}"
                  targetQuantity: "{$.targetQuantity}"
                  imageId: "{$.imageId}"
                  jcloudsRegions: "{$.jcloudsRegions}"
                  subnetId: "{$.subnetId}"
                  vmIdentity: "{$.vmIdentity}"
                  hardwareId: "{$.hardwareId}"
                  providerSettings: "{$.providerSettings}"
                  jcloudsIdentity: "{$.jcloudsIdentity}"
                  jcloudsCredential: "{$.jcloudsCredential}"
                  vmPassword: "{$.vmPassword}"
                  useSecureCredentialsStore: "{$.useSecureCredentialsStore}"
                  jcloudsProvider: "{$.jcloudsProvider}"
                  staticIps: "{$.staticIps}"
                  jcloudsNodeNamePrefix: "{$.jcloudsNodeNamePrefix}"
                  ec2SecurityGroup: "{$.ec2SecurityGroup}"
                  vmCredentialResource: "{$.vmCredentialResource}"
                  roleName: "{$.roleName}"
                  jcloudsEndpoint: "{$.jcloudsEndpoint}"
                  quantity: "{$.quantity}"
              output:
                ips: ips
                vms: vms
                privateips: privateips

        - start-logger:
            action: chefsolo
            phase: start-logger
            precedingPhases: [ init-properties, provision ]
            parameters:
              roles: [ logger ]
              recipeUrl: "http://qubell-logging.s3.amazonaws.com/{$.logger-cookbooks-version}/nxlog.tar.gz"
              runList: [ "recipe[nxlog::logger]" ]
              jattrs:
                nxlog:
                  # user: "{$.logger-user}"
                  # group: "{$.logger-group}"
                  # root: "/home/{$.logger-user}/.undeploy.me-nxlog"
                  user: "{$.vmIdentity}"
                  group: "{$.vmIdentity}"
                  root: "/home/{$.vmIdentity}/.undeploy.me-nxlog"
                  monitor_dir: "/home/{$.vmIdentity}/.undeploy.me"
                  consumer: "{$.properties.logstash.logstash-host}"
    return:
        ips:
          value: "{$.ips}"
        vms:
          value: "{$.vms}"
        privateips:
          value: "{$.privateips}"
