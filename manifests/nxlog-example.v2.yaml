application:

    interfaces:

        input:
            logger-num: bind(workflow#input.logger-num)
        actions:
            do-something: bind(workflow#actions.do-something)
            do-empty-chef-run: bind(workflow#actions.do-empty-chef-run)
        result:
            vms:                       bind(workflow#result.vms)
            logging-dashboard: bind(workflow#result.logging-dashboard)

    bindings:
        - [ logging, workflow ]

    configuration:
        input.logger-num: 2

    components:

        logging:
            type: reference.Service
            interfaces:
                logger:
                    logger-server:   publish-signal(string)

        workflow:
            type: workflow.Instance
            interfaces:
                input:
                    logger-num: configuration(int)
                actions:
                    do-something:      receive-command(string command => object stdout => object stderr)
                    do-empty-chef-run: receive-command(string logger-cookbooks-version => object chefState)
                logger:
                    logger-server: consume-signal(string)
                result:
                    vms:                       publish-signal(list<string>)
                    logging-dashboard: publish-signal(string)
            required: [logger]
            configuration:
                configuration.workflows:

                    launch:
                        parameters:
                            logger-num: # for test purposes
                                description: Number of loggers
                                type: int
                                default: 2

                        steps:

                            - provision-vm:
                                action: provisionVmsWithLogging
                                phase: provision-vm
                                parameters:
                                    quantity: "{$.logger-num}"
                                    hardwareId: "m1.small"
                                    roleName: logger
                                    vmIdentity: ec2-user
                                    imageId: us-east-1/ami-3ecd1e57
                                output:
                                    loggerips: ips
                                    logging-dashboard: logging-dashboard

                            - do-something:
                                action: do-something
                                precedingPhases: [ provision-vm ]
                                parameters: {}

                        return:
                            vms:
                                description: VMs
                                value: "{$.loggerips}"
                            # ADD TO YOUR MANIFEST this return value should present to get rendered widget with link
                            logging-dashboard:
                                description: Logging Dashboard for instance
                                value: "{$.logging-dashboard}"

                    do-something:
                        parameters:
                            command:
                              type: string
                              default: 'echo "Hello from execrun!"'
                              description: "Command to execute"
                        steps:
                            - run-command:
                                action: execrun
                                phase: "run-command"
                                precedingPhases: [  ]
                                parameters:
                                    roles: [ logger ]
                                    command:
                                        - "{$.command}"
                                output:
                                    stdout: stdout
                                    stderr: stderr
                        return:
                            stdout:
                                value: "{$.stdout}"
                            stderr:
                                value: "{$.stderr}"


                    do-empty-chef-run:
                        parameters:
                            logger-cookbooks-version:
                              type: string
                              default: "stable"

                        steps:
                            - dummy-chefrun:
                                action: chefsolo
                                phase: "dummy-chefrun"
                                precedingPhases: [ ]
                                parameters:
                                    roles: [ logger ]
                                    recipeUrl: "http://qubell-logging.s3.amazonaws.com/{$.logger-cookbooks-version}/nxlog.tar.gz"
                                    runList: [ ]
                                    jattrs: {}
                                output:
                                    chefState: chefState
                        return:
                            chefState:
                                value: "{$.chefState}"


                    destroy:
                        steps:
                        - destroy-vm:
                            action: undeployEnv
                            parameters:
                                phase: destroy
